{
	"nodes":[
		{"id":"8f4032f996a8f5d6","type":"group","x":-1904,"y":-1893,"width":4818,"height":3398,"label":"C Lang"},
		{"id":"4898cbabcafac89f","type":"text","text":"Variables","x":48,"y":-171,"width":250,"height":60},
		{"id":"3ae096dee42c301d","type":"text","text":"To print variables in a ‘printf()’ statement, type this:\n```c\nprintf(\"You are %d years old!\", age); // %d - decimal\nprintf(\"Your name is %s.\", name); // %s - string\nprintf(\"Your name is %c.\", name); // %c - character\nprintf(\"Your name is %f.\", gpa); // %f - float\n```","x":1121,"y":-660,"width":800,"height":210},
		{"id":"717c313e3738bbe1","type":"text","text":"To create a variable, type this:\n```c\nint x; // declaration\nx = 123;\nint y = 321; //declaration and initialization\nint age = 21; //integer\nfloat gpa = 2.05; // float point number\nchar name = 'J'; // char stores a single character\nchar name[] = \"Jimit\"; // this store more than 1 letter and use double qoutes only\n```","x":1100,"y":-1000,"width":842,"height":280},
		{"id":"00635337bb257f15","type":"text","text":"| Data Type                                                   | Size (Bytes)             | Range                                   | Format Specifier                         |\n| ----------------------------------------------------------- | ------------------------ | --------------------------------------- | ---------------------------------------- |\n| signed char                                                 | 1                        | -128 to 127                             | %c or %d<br>[[202504241610 signed char]] |\n| unsigned char                                               | 1                        | 0 to 255                                | %c                                       |\n| array of characters                                         | unlimited                | unlimited                               | %s                                       |\n| float                                                       | 4 (32 bits of precision) | 1.2E-38 to 3.4E+38                      | %f                                       |\n| int<br>6-7 digits                                           | 4                        | -2,147,483,648 to 2,147,483,647         | %d                                       |\n| unsigned int<br>9-10 digits                                 | 4                        | 0 to 4,294,967,295                      | %u                                       |\n| double<br>15-16 digits<br>[[202504241609 Float and Double]] | 8 (64 bits of precision) | 1.7E-308 to 1.7E+308                    | %lf                                      |\n| bool (boolean)                                              | 1                        | 0-1 (Prints 0 for False and 1 for True) | %d                                       |\n| short                                                       | 2                        | -32,768 to 32,767                       | %d                                       |\n| unsigned short                                              | 2                        | 0 to 65,535                             | %d                                       |\n| unsigned short int                                          | 2                        | 0 to 65,535                             | %hu                                      |\n| long long int                                               | 8                        | -9 quintillion to 9 quintillion         | %lld                                     |\n| unsigned long long int                                      | 8                        | 0 to 18 quintillion                     | %llu                                     |","x":166,"y":-1200,"width":789,"height":860},
		{"id":"c52eebdd9bf4628d","type":"text","text":"Using a format specifier we can format the data that is printed using the ‘printf()’ statement. There are three types of format specifiers. Here are the examples:\n```c {16}\n#include <stdio.h>\n\nint main() {\n     float a = 103.8943;\n     \n     printf(\"%.2f\\n\", a); // 2 decimal places\n     printf(\"%15.3f\\n\", a); // right aligned by 15 characters (including the number)\n     // Also known as minimum field-width\n     printf(\"%-32.2f\", a); // left aligned by 32 characters (including the number)\n\n    return 0;\n}\n/* \nOutput:\n103.89\n        103.894\n103.89                          \n```","x":1980,"y":-760,"width":914,"height":567},
		{"id":"20b9025086816298","type":"text","text":"switch statements\n```c\n// Instead of typing\nelse if(marks > 33){\nprintf(\"You passed!\");\n}\nelse if(marks < 33){\nprintf(\"You failed!\");\n}\n\n// Type this\nswitch(grade){ // Instead of marks, the user types the Grade\n\tcase 'A': // If the user types A, it will print you passed!\n\t\tprintf(\"You passed!\");\n\t\tbreak;\n\tcase 'F': // If the user types F, it will print you failed!\n\t\tprintf(\"You failed!\");\n\t\tbreak;\n\tdefault:\n\t\tprintf(\"Not a valid grade\");\n}\n```\n\n> A `switch` keeps on running until it encounters a `case` having `break` statement in it.\n\n> A `switch` statements only tests for equality.\n\n> It is necessary to type `break` in the `case` statements, as it helps in exiting the loop. If no `break` are added then it will print all the outputs in all statements, which in the above case it will print “You passed!” and “You failed!” at the same time.","x":-1593,"y":7,"width":788,"height":782},
		{"id":"70097726b204af2d","type":"text","text":"- Addition (+)\n- Subtraction (-)\n- Multiplication (\\*\\)\n- Division (/)\n- Modulus (%)\n- Increment (++)\n- Decrement (--)","x":-734,"y":510,"width":250,"height":279},
		{"id":"d5261d660a98fa5e","type":"text","text":"1. `AND` operator\n```c\ntemp >= 0 && temp <=30;\n```\n\n2. `OR` Operator\n```c\ntemp >= 0 || temp <=30;\n```\n\n3. `NOT` Operator\n```c\n!temp // !<variable>\n```\n","x":-780,"y":100,"width":342,"height":370},
		{"id":"0fbd112b95b80f51","type":"text","text":"Logical","x":-734,"y":7,"width":250,"height":60},
		{"id":"1558fc26ef51243f","type":"text","text":"Operators","x":-413,"y":-81,"width":250,"height":60},
		{"id":"5884a80a7beb203b","type":"text","text":"Arithmetic","x":-413,"y":336,"width":250,"height":60},
		{"id":"25f35c04f0e93269","type":"text","text":"C Language","x":-77,"y":-21,"width":250,"height":60},
		{"id":"590e94cd0b46127d","type":"text","text":"History of C","x":130,"y":675,"width":250,"height":60},
		{"id":"b897a778c9045fe7","type":"text","text":"Structure of a program","x":298,"y":336,"width":297,"height":50},
		{"id":"c46a3abc16619a6f","type":"text","text":"![[structure-of-c-program.png]]","x":702,"y":236,"width":716,"height":391},
		{"id":"2cd419e168f10a90","type":"text","text":"*`#include`* is a preprocessor command to include all contents in the file\n\nThis is what *stdio.h* stands for **standard input output header**. It imports various functions for input, output and file handling.","x":761,"y":824,"width":598,"height":180},
		{"id":"62d02ef8ae5c367e","type":"text","text":"# Hello, World\n```c\nprintf(\"Hello, World\");\n```","x":425,"y":-39,"width":341,"height":157},
		{"id":"1bf01f1ab75a0ccf","type":"text","text":"To print `\"`, `'`, `\\` and `/` inside in the *printf* statement, type this\n```c\nprintf(\"\\\"This is a quote.\\\" - Jimit Patel\")\n```","x":2087,"y":-68,"width":606,"height":154},
		{"id":"ed63b5f38c32e48c","type":"text","text":"Escape sequences are a letter with a backslash. It is same like python.\n1. `\\n` - New Line.\n2. `\\t` - Horizontal Tab.\n3. `\\b` - Backspace.\n4. `\\f` - Formfeed page break.\n5. `\\v` - Vertical Tab.\n6. `\\\\` - Backslash.\n7. `\\?` - Question Mark.\n8. `\\r` - Carrigage Return (Brings the cursor back to initial position and it doesn't print the characters before it).\n9. `\\bbb` - Prints the letter or value based on the **octal** code given.\n10. `\\xhh` - Prints the **hexadcimal** code given in the place of `hh`.","x":1192,"y":-251,"width":729,"height":460},
		{"id":"7f6c24ddd143cb36","type":"text","text":"Electrical Network Analysis","x":-7100,"y":-884,"width":341,"height":60},
		{"id":"c9b19e5c559c010f","type":"text","text":"AC","x":-6056,"y":-868,"width":85,"height":60},
		{"id":"aab447e3a8618228","type":"text","text":"Circuits","x":-6056,"y":-542,"width":146,"height":50},
		{"id":"d0e923f46d0f1ec7","type":"text","text":"Impedance and Admittance\n$$\n\\begin{gathered}\nZ = \\frac{V_m}{I_m} = \\frac{V_{rms}}{I_{rms}} \\\\ \\\\\nX_L = \\omega L \\\\ \\\\\nX_C = \\frac{1}{\\omega C}\n\\end{gathered}\n$$\n$$\n\\begin{gathered}\nZ = \\frac{\\mathcal{E}_o}{i_o} \\\\ \\\\\nY = \\frac{1}{Z} = \\frac{i_o}{\\mathcal{E}_o}\n\\end{gathered}\n$$","x":-5857,"y":-1060,"width":198,"height":383},
		{"id":"e1db1975bd9ff63a","type":"text","text":"# Impedance\n\n$$\n\\begin{gathered}\n\\vec{Z} = R + jX\n\\end{gathered}\n$$\nIt is the sum of the resistance component and an imaginary component of impedance. Its unit is ohms.","x":-5550,"y":-1162,"width":250,"height":324},
		{"id":"e4d3c10e47eced76","type":"text","text":"# Admittance\n$$\n\\begin{gathered}\n\\vec{Y} = G + yB \\\\ \\\\\n\\vec{Y} = \\frac{1}{\\vec{Z}}\n\\end{gathered}\n$$\n\nwhere G = Conductance and,\n\t  B = Susceptance","x":-5550,"y":-824,"width":250,"height":294},
		{"id":"c872f13028dec60f","type":"text","text":"AC with Resistor\n$$\n\\begin{gathered}\ni_o = \\frac{\\mathcal{E}}{R} \\\\ \\\\\ni = i_o\\sin\\omega t \\\\ \\\\\n\\mathcal{E} = \\mathcal{E}_o\\sin\\omega t\n\\end{gathered}\n$$","x":-5818,"y":-658,"width":245,"height":232},
		{"id":"9b0b63405d007ae3","type":"text","text":"# RL\n$$\n\\begin{gathered}\nZ = \\sqrt{R^2 + (\\omega L)^2}\n\\end{gathered}\n$$\n\nPeak current is defined as\n$$\n\\begin{gathered}\n\\tan{\\upvarphi} = \\frac{\\omega L}{R}\n\\end{gathered}\n$$\n\nThe steady-state current is\n$$\ni = \\frac{\\mathcal{E}_o}{Z}\\sin(\\omega t\\ -\\ \\upvarphi)\n$$\n\n","x":-6123,"y":183,"width":296,"height":389},
		{"id":"6039238c28ce9466","type":"text","text":"# RLC\n\n\n$$\n\\begin{gathered}\nX = X_C - X_L = (\\frac{1}{\\omega C} - \\omega L)\n\\end{gathered}\n$$\n$$\n\\begin{gathered}\nZ = \\sqrt{R^2 + (\\frac{1}{\\omega C} - \\omega L)^2} \\\\ \\\\\n\\tan{\\upvarphi} = \\frac{\\frac{1}{\\omega C} - \\omega L}{R}\n\\end{gathered}\n$$\n\nThe steady-state current is\n$$\ni = \\frac{\\mathcal{E}_o}{Z}\\sin(\\omega t\\ -\\ \\upvarphi)\n$$","x":-5728,"y":272,"width":333,"height":402},
		{"id":"22444f125ed42804","type":"text","text":"AC with Inductor\n$$\n\\begin{gathered}\ni_o = \\frac{\\mathcal{E}_o}{\\omega L} \\\\ \\\\\ni = i_o\\sin(\\omega t\\ -\\ \\frac{\\pi}{2}) \\\\ \\\\\n\\mathcal{E} = \\mathcal{E}_o\\sin\\omega t\n\\end{gathered}\n$$\n> Current **lags** voltage by π/2 radians.","x":-5728,"y":-69,"width":296,"height":301},
		{"id":"ecbd39179ccfd118","type":"text","text":"AC with Capacitor\n$$\n\\begin{gathered}\ni_o = C\\mathcal{E}_o\\ \\omega \\\\ \\\\\ni = i_o\\sin(\\omega t\\ +\\ \\frac{\\pi}{2}) \\\\ \\\\\n\\mathcal{E} = \\mathcal{E}_o\\sin\\omega t\n\\end{gathered}\n$$\n> Current **leads** voltage by π/2 radians.","x":-5728,"y":-387,"width":317,"height":285},
		{"id":"963a85ec71c6c968","type":"text","text":"# RC\n$$\n\\begin{gathered}\nZ = \\sqrt{R^2 + (\\frac{1}{\\omega C})^2}\n\\end{gathered}\n$$\n\nPeak current is defined as\n$$\n\\begin{gathered}\ni_o = \\frac{\\mathcal{E}_o}{Z} = \\frac{\\mathcal{E}_o}{\\sqrt{R^2 + (\\frac{1}{\\omega C})^2}} \\\\ \\\\\n\\tan{\\upvarphi} = \\frac{1}{\\omega \\ CR}\n\\end{gathered}\n$$\nThe steady-state current is\n$$\ni = \\frac{\\mathcal{E}_o}{Z}\\sin(\\omega t\\ -\\ \\upvarphi)\n$$","x":-6141,"y":-347,"width":296,"height":499},
		{"id":"a7ec6dba4613816b","type":"text","text":"When it is used:\n1. Star Connection\n\t- Neutral point is needed.\n\t- 2 separate voltages.\n\n2. Delta Connection\n\t- Neutral point is not needed.\n\t- To limit 3<sup>rd</sup> harmonics.","x":-6562,"y":390,"width":411,"height":265},
		{"id":"9db77efd4dabb326","type":"text","text":"- Line-to-Neutral Voltage - Voltage b/w line to neutral. Ex. b/w A and N\n\n- Line-to-Line Voltage - Voltage b/w line to line. Ex. b/w A and B.","x":-6563,"y":84,"width":273,"height":287},
		{"id":"62501b27f942fa85","type":"text","text":"Types of Connections\n\n1. Y-Y Connection - Auto-transformer\n2. ∆-∆ Connection - High voltage power transmissions\n3. ∆-Y Connection - Distribution Transformer\n","x":-6562,"y":675,"width":464,"height":218},
		{"id":"a3727c1f4a10ae69","type":"text","text":"Power transmitted by ∆ and Y connection in 3 phase is\n$$\nP = 3V_P I_P \\cos \\phi\n$$\n![[stardeltapower.png]]","x":-6561,"y":910,"width":751,"height":315},
		{"id":"ede1500a41dd979b","type":"text","text":"# Constants\n```c\nconst float pi = 3.14159;\n```","x":-312,"y":-402,"width":440,"height":152},
		{"id":"fc5305b414d42f3c","type":"text","text":"Phase Sequence\nthe sequential order at which voltages pass through the zero phase point (point of max voltage).\n![[sequence.png]]\nabc Sequence → Positive sequence\nacb Sequence → Negative sequence","x":-7128,"y":-264,"width":474,"height":379},
		{"id":"0ae6202b109e3d7c","type":"text","text":"Star (Y) Connection\n\nBoth 3-phase source and load can be star connected.\n![[star.png]]\n\nHere 3 polarity ends (means when there more than 1 ends) of 3 phase voltage sources are joined to form a neutral point (point `n` in the figure).\n\n> In star connections, line-to-line current = line-to-neutral current.\n\n$$\nV_L = \\sqrt{3}V_{LN}\n$$\n","x":-7165,"y":223,"width":474,"height":610},
		{"id":"aa8a354de5cda6fe","type":"text","text":"Delta (∆) Connection\n\nHere 3 phase voltage sources are connected in such a way that they form a triangle.\n\n$$\nV_L = \\sqrt{3}V_{LN}\n$$\n$$\nI_L = \\sqrt{3}I_{Z}\n$$\nI<sub>Z</sub> = current through one branch of delta connection","x":-7162,"y":853,"width":474,"height":315},
		{"id":"16bddf08f83c00e4","x":-7054,"y":-774,"width":250,"height":60,"type":"text","text":"3-Phase Circuits"},
		{"id":"5f2061c5b7866160","type":"text","text":"3-Phase Circuits\n\nSet of 3 sinusoidal voltages (or currents) that are equal in magnitude but have a progressive phase difference of 2π/3 make a balanced 3-phase voltage (or current) system.\n\nThe sum of the 3-phase voltages (or currents) is 0 all the time.","x":-7123,"y":-656,"width":387,"height":342},
		{"id":"f3d46c8db30c11d6","x":-7645,"y":-875,"width":250,"height":60,"type":"text","text":"Transformers"},
		{"id":"7b5a7c59f89a2639","x":-7639,"y":-659,"width":404,"height":283,"type":"text","text":"Ideal Transformer (IT)\n- Transformer windings are resistance-less.\n- Core has infinite permeability so that 0 emf is required to create flux.\n- Leakage flux is negligible.\n- core losses are negligible."},
		{"id":"f0173b4a5e3f41eb","x":-8226,"y":-614,"width":460,"height":314,"type":"text","text":"Transformation Ratio\n\nIn rms values,\n$$\n\\begin{gathered}\n\\frac{V_1}{V_2} = \\frac{E_1}{E_2} = \\frac{N_1}{N_2} = a \\ (turn \\ ratio) \\\\\n\\end{gathered}\n$$\nIn terms of phasors,\n$$\n\\begin{gathered}\n\\frac{\\overline{V_1}}{\\overline{V_2}} = \\frac{\\overline{E_1}}{\\overline{E_2}}\n\\end{gathered}\n$$"},
		{"id":"af7543e6ac188d47","x":-7877,"y":-236,"width":576,"height":753,"type":"text","text":"Voltage and EMFs\n$$\n\\begin{gathered}\n\\phi = \\phi_{max}\\sin\\omega t; \\\\\n\\omega = 2\\pi f \\ rad/s\n\\end{gathered}\n$$\n![[transformersvoltage.png]]\n\n$$\n\\begin{gathered}\n\\phi_{max} = \\frac{E_1}{\\sqrt{2}\\pi f N_1} = \\frac{E_2}{\\sqrt{2}\\pi f N_2} \\\\ \\\\ \n\\sqrt{2}\\pi = 4.44\n\\end{gathered}\n$$"},
		{"id":"8fd2303b31777cce","type":"text","text":"Libraries","x":-392,"y":828,"width":158,"height":60},
		{"id":"912c8d13da6ae4f3","type":"text","text":"ctype.h\n\n- **isalnum()**: Checks if character is alphanumeric. Returns non-zero if true, 0 otherwise.\n    \n- **isalpha()**: Checks if character is alphabetic. Returns non-zero if true, 0 otherwise.\n    \n- **isblank()**: Checks if character is a blank space. Returns non-zero if true, 0 otherwise.\n    \n- **iscntrl()**: Checks if character is a control character. Returns non-zero if true, 0 otherwise.\n    \n- **isdigit()**: Checks if character is a decimal digit. Returns non-zero if true, 0 otherwise.\n    \n- **islower()**: Checks if character is lowercase. Returns non-zero if true, 0 otherwise.\n    \n- **isprint()**: Checks if character is printable. Returns non-zero if true, 0 otherwise.\n    \n- **ispunct()**: Checks if character is a punctuation mark. Returns non-zero if true, 0 otherwise.\n    \n- **isspace()**: Checks if character is whitespace. Returns non-zero if true, 0 otherwise.\n    \n- **isupper()**: Checks if character is uppercase. Returns non-zero if true, 0 otherwise.\n    \n- **isxdigit()**: Checks if character is a hexadecimal digit. Returns non-zero if true, 0 otherwise.\n    \n- **tolower()**: Converts uppercase character to lowercase. Returns the lowercase character.\n    \n- **toupper()**: Converts lowercase character to uppercase. Returns the uppercase character.\n","x":-1041,"y":1001,"width":1054,"height":459},
		{"id":"2fe722c98664514c","type":"text","text":"- 1969 - B Lang - word oriented (not byte oriented)\n- 1972 - C Lang - multiple types (byte and character)\n- 1972-1978 - C and Unix joined to make assembly easier and be able to import to other OS's. This improved C lang also.\n- 1989 - C became popular and became standardized. Called C89/ ANSI - Void type, C++ Declarations, character sets and locales. But it was not good and difficult to use.\n- 1990 - C90/ISO C (International Organization of Standards). Major revisions.\n- 1999 – C99 – complex type, // comments, Unicode\n- 2011 – C11 – Library improvements\n- 2018 – C17 - Easier than C11\n- 2023 - C23 - Latest Version\n","x":84,"y":865,"width":615,"height":460},
		{"id":"07e0a4afc6248cec","x":-1787,"y":953,"width":714,"height":500,"type":"text","text":"math.h\n\n1. **`fabs(x)`** - Returns the absolute value of x (floating-point).\n    \n2. **`fmod(x, y)`** - Returns the floating-point remainder of x divided by y.\n    \n3. **`remainder(x, y)`** - Returns the IEEE-compliant remainder of x divided by y, rounded to the nearest integer.\n    \n4. **`log(x)`** - Returns the natural logarithm (base e) of x.\n    \n5. **`log2(x)`** - Returns the base-2 logarithm of the absolute value of x.\n    \n6. **`pow(x, y)`** - Returns the value of x raised to the power y (xʸ).\n    \n7. **`sqrt(x)`** - Returns the square root of x.\n    \n8. **`ceil(x)`** - Returns the smallest integer value greater than or equal to x (rounds up).\n    \n9. **`floor(x)`** - Returns the largest integer value less than or equal to x (rounds down)."},
		{"id":"3b768a5ccd0b2f00","type":"file","file":"02 - Areas/College/Year 1/C Programming/Notes/202504241610 signed char.md","x":-782,"y":-1857,"width":866,"height":1338},
		{"id":"bf6b71ed96a40339","type":"text","text":"if/else statement\n```c\nif(age <= 18){\nprintf(\"YOU ARE A MINOR!\");\n}\nelse if(age == 18){ // Just like elif in python\nprintf(\"You are 18 years old.\");\n}\nelse{\nprintf(\"You are old.\");\n}\n```","x":-877,"y":-504,"width":521,"height":334},
		{"id":"89e663d2d764bf44","type":"text","text":"Decision Making","x":-1189,"y":-108,"width":250,"height":60},
		{"id":"131074ee2a60cfba","x":-1882,"y":-810,"width":516,"height":532,"type":"text","text":"for loop\n```c\n#include <stdio.h>\n\nint main(){\nfor(int i = 10, i >= 1; i--){ // print 10 to 1\n\tprintf(\"%d\\n\", i);\n\t}\n}\n```\n\n`int i = 10` is where we declare the start. For now it is from 10.\n\n`i >= 1` declares the end stating till what the loop should keep on running.\n\n`i++ or i--` is the we can control the increment or decrement. It can be used as multiples of a number, skipping numbers, etc."},
		{"id":"10b6ca217673aaf6","x":-1472,"y":-104,"width":115,"height":60,"type":"text","text":"Loops"}
	],
	"edges":[
		{"id":"b6614908d72d444d","fromNode":"25f35c04f0e93269","fromSide":"bottom","toNode":"590e94cd0b46127d","toSide":"top"},
		{"id":"b429417d4b916198","fromNode":"590e94cd0b46127d","fromSide":"bottom","toNode":"2fe722c98664514c","toSide":"top"},
		{"id":"5468085bb203a335","fromNode":"25f35c04f0e93269","fromSide":"right","toNode":"b897a778c9045fe7","toSide":"left"},
		{"id":"71b9ef610cde8952","fromNode":"25f35c04f0e93269","fromSide":"right","toNode":"62d02ef8ae5c367e","toSide":"left"},
		{"id":"3240baadf165910c","fromNode":"62d02ef8ae5c367e","fromSide":"right","toNode":"ed63b5f38c32e48c","toSide":"left"},
		{"id":"d6eb715bbb3bc963","fromNode":"ed63b5f38c32e48c","fromSide":"right","toNode":"1bf01f1ab75a0ccf","toSide":"left"},
		{"id":"70735b1a1dcd9b81","fromNode":"25f35c04f0e93269","fromSide":"top","toNode":"4898cbabcafac89f","toSide":"bottom"},
		{"id":"39816fdad68d0969","fromNode":"4898cbabcafac89f","fromSide":"top","toNode":"00635337bb257f15","toSide":"bottom"},
		{"id":"df6eac3c64b1ca9d","fromNode":"00635337bb257f15","fromSide":"right","toNode":"717c313e3738bbe1","toSide":"left"},
		{"id":"054f044df70eff8d","fromNode":"717c313e3738bbe1","fromSide":"bottom","toNode":"3ae096dee42c301d","toSide":"top"},
		{"id":"7b9b713d6f9fd321","fromNode":"62d02ef8ae5c367e","fromSide":"top","toNode":"3ae096dee42c301d","toSide":"bottom"},
		{"id":"b6f327b5d0d9f2e7","fromNode":"3ae096dee42c301d","fromSide":"right","toNode":"c52eebdd9bf4628d","toSide":"left"},
		{"id":"39e783987d08fb12","fromNode":"4898cbabcafac89f","fromSide":"top","toNode":"ede1500a41dd979b","toSide":"right"},
		{"id":"9be671242e7ff8be","fromNode":"00635337bb257f15","fromSide":"left","toNode":"3b768a5ccd0b2f00","toSide":"right"},
		{"id":"fa952a3f9aceaddd","fromNode":"25f35c04f0e93269","fromSide":"left","toNode":"1558fc26ef51243f","toSide":"right"},
		{"id":"f6cb1101408e3e7b","fromNode":"1558fc26ef51243f","fromSide":"bottom","toNode":"5884a80a7beb203b","toSide":"top"},
		{"id":"4e274aee20c4e796","fromNode":"1558fc26ef51243f","fromSide":"bottom","toNode":"0fbd112b95b80f51","toSide":"top"},
		{"id":"ee4e48203ca42ff2","fromNode":"0fbd112b95b80f51","fromSide":"bottom","toNode":"d5261d660a98fa5e","toSide":"top"},
		{"id":"eb50a09184a95b6d","fromNode":"25f35c04f0e93269","fromSide":"top","toNode":"89e663d2d764bf44","toSide":"right"},
		{"id":"b371c33e5ca930ae","fromNode":"89e663d2d764bf44","fromSide":"bottom","toNode":"20b9025086816298","toSide":"top"},
		{"id":"b0d814ec984b938f","fromNode":"8fd2303b31777cce","fromSide":"bottom","toNode":"912c8d13da6ae4f3","toSide":"top"},
		{"id":"1fbc79355a1cf590","fromNode":"25f35c04f0e93269","fromSide":"bottom","toNode":"8fd2303b31777cce","toSide":"top"},
		{"id":"bf5da432f494d153","fromNode":"5884a80a7beb203b","fromSide":"bottom","toNode":"70097726b204af2d","toSide":"right"},
		{"id":"53e863f57ea6f200","fromNode":"b897a778c9045fe7","fromSide":"right","toNode":"c46a3abc16619a6f","toSide":"left"},
		{"id":"84b658c8698bf362","fromNode":"c46a3abc16619a6f","fromSide":"bottom","toNode":"2cd419e168f10a90","toSide":"top"},
		{"id":"41ef299c6b63982d","fromNode":"7f6c24ddd143cb36","fromSide":"right","toNode":"c9b19e5c559c010f","toSide":"left"},
		{"id":"086dae37e558392c","fromNode":"c9b19e5c559c010f","fromSide":"right","toNode":"d0e923f46d0f1ec7","toSide":"left"},
		{"id":"6cf1c9b275c70548","fromNode":"d0e923f46d0f1ec7","fromSide":"right","toNode":"e1db1975bd9ff63a","toSide":"left"},
		{"id":"21182fbe44ea1f67","fromNode":"d0e923f46d0f1ec7","fromSide":"right","toNode":"e4d3c10e47eced76","toSide":"left"},
		{"id":"7dcbafe30bede951","fromNode":"c9b19e5c559c010f","fromSide":"bottom","toNode":"aab447e3a8618228","toSide":"top"},
		{"id":"2d74a99ba1137afe","fromNode":"aab447e3a8618228","fromSide":"right","toNode":"c872f13028dec60f","toSide":"left"},
		{"id":"430ca19390e93558","fromNode":"aab447e3a8618228","fromSide":"right","toNode":"ecbd39179ccfd118","toSide":"left"},
		{"id":"7075c85f5c99204e","fromNode":"aab447e3a8618228","fromSide":"right","toNode":"22444f125ed42804","toSide":"left"},
		{"id":"f151b09d27c3986e","fromNode":"aab447e3a8618228","fromSide":"bottom","toNode":"963a85ec71c6c968","toSide":"top"},
		{"id":"b772ccbb1ee20b74","fromNode":"aab447e3a8618228","fromSide":"right","toNode":"6039238c28ce9466","toSide":"left"},
		{"id":"b2f1bcb2fcef7928","fromNode":"aab447e3a8618228","fromSide":"left","toNode":"9b0b63405d007ae3","toSide":"left"},
		{"id":"89d453b42f0809b9","fromNode":"5f2061c5b7866160","fromSide":"bottom","toNode":"fc5305b414d42f3c","toSide":"top"},
		{"id":"94553f7fcc28ed0e","fromNode":"0ae6202b109e3d7c","fromSide":"right","toNode":"9db77efd4dabb326","toSide":"left"},
		{"id":"79a780112ee0f237","fromNode":"fc5305b414d42f3c","fromSide":"bottom","toNode":"0ae6202b109e3d7c","toSide":"top"},
		{"id":"c73c2c383262d552","fromNode":"aa8a354de5cda6fe","fromSide":"right","toNode":"9db77efd4dabb326","toSide":"left"},
		{"id":"b823932bc60b29d4","fromNode":"0ae6202b109e3d7c","fromSide":"right","toNode":"a7ec6dba4613816b","toSide":"left"},
		{"id":"ab0d4da347d778cd","fromNode":"aa8a354de5cda6fe","fromSide":"right","toNode":"a7ec6dba4613816b","toSide":"left"},
		{"id":"0fb72d716b1f1983","fromNode":"aa8a354de5cda6fe","fromSide":"right","toNode":"62501b27f942fa85","toSide":"left"},
		{"id":"7a433e9952dca6c0","fromNode":"0ae6202b109e3d7c","fromSide":"right","toNode":"62501b27f942fa85","toSide":"left"},
		{"id":"bc9e05ef81da521b","fromNode":"0ae6202b109e3d7c","fromSide":"right","toNode":"a3727c1f4a10ae69","toSide":"left"},
		{"id":"bc8288526dc4a179","fromNode":"aa8a354de5cda6fe","fromSide":"right","toNode":"a3727c1f4a10ae69","toSide":"left"},
		{"id":"8bc12b9863109e91","fromNode":"fc5305b414d42f3c","fromSide":"left","toNode":"aa8a354de5cda6fe","toSide":"left"},
		{"id":"660dbee6b0a69d9d","fromNode":"7f6c24ddd143cb36","fromSide":"bottom","toNode":"16bddf08f83c00e4","toSide":"top"},
		{"id":"5b94572838ff04e8","fromNode":"16bddf08f83c00e4","fromSide":"bottom","toNode":"5f2061c5b7866160","toSide":"top"},
		{"id":"f13999476277e01c","fromNode":"7f6c24ddd143cb36","fromSide":"left","toNode":"f3d46c8db30c11d6","toSide":"right"},
		{"id":"53f875c975f66eb8","fromNode":"f3d46c8db30c11d6","fromSide":"bottom","toNode":"7b5a7c59f89a2639","toSide":"top"},
		{"id":"9d6e82eebf784330","fromNode":"7b5a7c59f89a2639","fromSide":"bottom","toNode":"af7543e6ac188d47","toSide":"top"},
		{"id":"6fdd6dbe167df3f2","fromNode":"7b5a7c59f89a2639","fromSide":"left","toNode":"f0173b4a5e3f41eb","toSide":"right"},
		{"id":"adceb9d450a12ee0","fromNode":"8fd2303b31777cce","fromSide":"left","toNode":"07e0a4afc6248cec","toSide":"top"},
		{"id":"579115007415fae0","fromNode":"bf6b71ed96a40339","fromSide":"left","toNode":"10b6ca217673aaf6","toSide":"right"},
		{"id":"574398cb4ad2e7a9","fromNode":"20b9025086816298","fromSide":"top","toNode":"10b6ca217673aaf6","toSide":"right"},
		{"id":"a02cf08d501a5458","fromNode":"89e663d2d764bf44","fromSide":"left","toNode":"10b6ca217673aaf6","toSide":"right"},
		{"id":"51038e10679419f2","fromNode":"89e663d2d764bf44","fromSide":"top","toNode":"bf6b71ed96a40339","toSide":"bottom"},
		{"id":"4742ee07f9fbb3ed","fromNode":"10b6ca217673aaf6","fromSide":"left","toNode":"131074ee2a60cfba","toSide":"bottom"}
	]
}